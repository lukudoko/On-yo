// pages/test/recommendations.js
import { useState, useEffect } from 'react';

export default function RecommendationTestPage() {
  const [groups, setGroups] = useState([]);
  const [userProgress, setUserProgress] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [sortBy, setSortBy] = useState('priority');

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/test');
        const json = await response.json();

        if (json.success) {
          setGroups(json.data.groups);
          setUserProgress(json.data.userProgress);
        } else {
          setError(json.error || 'Failed to load data');
        }
      } catch (err) {
        setError('Failed to fetch data');
        console.error('Error:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // Calculate priority scores for all groups using weighted scoring system
  const calculateGroupScores = () => {
    // Group user progress by onyomi group
    const progressByGroup = new Map();
    
    userProgress.forEach(progress => {
      const group = progress.kanji?.primary_onyomi;
      if (!group) return;
      
      if (!progressByGroup.has(group)) {
        progressByGroup.set(group, { mastered: 0, learning: 0, unlearned: 0 });
      }
      
      const stats = progressByGroup.get(group);
      if (progress.masteryLevel === 2) stats.mastered++;
      else if (progress.masteryLevel === 1) stats.learning++;
      // Note: We'll calculate unlearned separately
    });

    // Calculate scores for each group
    const scoredGroups = groups.map(group => {
      const totalKanji = group._count.kanji;
      const progress = progressByGroup.get(group.reading) || { 
        mastered: 0, 
        learning: 0, 
        unlearned: 0 
      };

      // Calculate actual unlearned count
      const actualUnlearned = totalKanji - progress.mastered - progress.learning;
      
      // Update progress object with correct unlearned count
      const updatedProgress = {
        ...progress,
        unlearned: Math.max(0, actualUnlearned),
        total: totalKanji
      };

  // Weighted scoring system
  const totalPoints = (progress.mastered * 2) + (progress.learning * 1) + (actualUnlearned * 0);
  const maxPossiblePoints = totalKanji * 2;
  const normalizedScore = maxPossiblePoints > 0 ? (totalPoints / maxPossiblePoints) * 100 : 0;
      
      // Completion rate (mastered only)
      const completionRate = totalKanji > 0 
        ? (progress.mastered / totalKanji) * 100
        : 0;
      
      // Priority score - higher usefulness, lower completion = higher priority
      // But exclude fully mastered groups
let priorityScore;
  if (normalizedScore >= 95) {
    priorityScore = 0; // Fully mastered
  } else {
    // This creates the ranking you want: higher normalized score = higher priority
    // But also factors in usefulness for tie-breaking
    priorityScore = (normalizedScore * 10) + (group.usefulness_score * 0.1);
  }
  
      // Categorize group
      const isStarted = (progress.mastered + progress.learning) > 0;
      const isCompleted = normalizedScore >= 95;
      const isInProgress = progress.learning > 0;

      return {
        ...group,
        progress: updatedProgress,
        completion_rate: Math.round(completionRate),
        normalized_score: Math.round(normalizedScore),
        priority_score: Math.round(priorityScore * 100) / 100,
        is_started: isStarted,
        is_completed: isCompleted,
        is_in_progress: isInProgress,
        category: isCompleted ? 'completed' : isStarted ? 'started' : 'unstarted'
      };
    });

    // Sort based on selected criteria
    return scoredGroups.sort((a, b) => {
      switch (sortBy) {
        case 'usefulness':
          return b.usefulness_score - a.usefulness_score;
        case 'completion':
          return b.normalized_score - a.normalized_score; // Higher completion first
        case 'priority':
        default:
          // For priority sorting, put completed groups at the end
          if (a.is_completed && !b.is_completed) return 1;
          if (!a.is_completed && b.is_completed) return -1;
          return b.priority_score - a.priority_score;
      }
    });
  };

  const scoredGroups = calculateGroupScores();

  if (loading) {
    return (
      <div className="p-6 max-w-6xl mx-auto">
        <div className="text-center py-10">
          <div className="animate-pulse">Loading recommendation data...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6 max-w-6xl mx-auto">
        <div className="text-center py-10 text-red-500">
          Error: {error}
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-6xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">Recommendation Algorithm Test</h1>
      
      <div className="mb-6 flex gap-4 flex-wrap">
        <button 
          className={`px-4 py-2 rounded ${sortBy === 'priority' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
          onClick={() => setSortBy('priority')}
        >
          Sort by Priority Score
        </button>
        <button 
          className={`px-4 py-2 rounded ${sortBy === 'usefulness' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
          onClick={() => setSortBy('usefulness')}
        >
          Sort by Usefulness
        </button>
        <button 
          className={`px-4 py-2 rounded ${sortBy === 'completion' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
          onClick={() => setSortBy('completion')}
        >
          Sort by Completion
        </button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <div>
          <h2 className="text-xl font-bold mb-4">Group Statistics</h2>
          <div className="bg-white rounded-lg shadow p-4">
            <div className="grid grid-cols-3 gap-4 text-center">
              <div>
                <div className="text-2xl font-bold text-blue-600">
                  {scoredGroups.filter(g => g.category === 'started').length}
                </div>
                <div className="text-sm text-gray-600">Started</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-green-600">
                  {scoredGroups.filter(g => g.category === 'completed').length}
                </div>
                <div className="text-sm text-gray-600">Completed</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-600">
                  {scoredGroups.filter(g => g.category === 'unstarted').length}
                </div>
                <div className="text-sm text-gray-600">Unstarted</div>
              </div>
            </div>
          </div>
        </div>

        <div>
          <h2 className="text-xl font-bold mb-4">Top Recommendations</h2>
          <div className="bg-white rounded-lg shadow p-4">
            {scoredGroups
              .filter(g => !g.is_completed) // Don't show completed groups in recommendations
              .slice(0, 5)
              .map((group, index) => (
                <div key={group.reading} className="flex justify-between items-center py-2 border-b">
                  <span className="font-mono font-bold">#{index + 1}</span>
                  <span className="font-jp text-xl">{group.reading}</span>
                  <span className="font-bold text-blue-600">{group.priority_score}</span>
                </div>
              ))}
          </div>
        </div>
      </div>

      <div>
        <h2 className="text-2xl font-bold mb-4">All Groups Analysis</h2>
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Group</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Usefulness</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Normalized Score (completion %)</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority Score</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {scoredGroups.map((group) => (
                <tr key={group.reading} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="font-jp text-xl font-bold">{group.reading}</div>
                    <div className="text-sm text-gray-500">
                      {group.progress.total} kanji
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">
                      {group.usefulness_score}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex gap-1 text-xs">
                      <span className="px-2 py-1 bg-green-100 text-green-800 rounded">
                        {group.progress.mastered} âœ“
                      </span>
                      <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded">
                        {group.progress.learning} ðŸ“š
                      </span>
                      <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded">
                        {group.progress.unlearned} ?
                      </span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {group.normalized_score}%
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-bold text-blue-600">
                      {group.priority_score}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      group.category === 'completed' 
                        ? 'bg-green-100 text-green-800' 
                        : group.category === 'started' 
                          ? 'bg-yellow-100 text-yellow-800' 
                          : 'bg-gray-100 text-gray-800'
                    }`}>
                      {group.category}
                      {group.is_in_progress && ' (active)'}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}